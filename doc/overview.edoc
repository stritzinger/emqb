			-*- html -*-

	EMQB overview page


@author Sebastien Merle <s.merle@gmail.com>
@copyright 2024 Peer Stritzinger GmbH
@version {@version}
@title Welcome to EMQB

@doc EMQB is an MQTT bridge inspired by and using
<a href="https://github.com/emqx/emqtt">EMQTT</a> client.

== Contents ==

<ol>
  <li>{@section Introduction}</li>

  <li>{@section Differences with EMQTT}</li>

  <li>{@section Bypass in Hybrid Mode}</li>

  <li>{@section Build}</li>

  <li>{@section Tests}</li>
</ol>

== Introduction ==

It offers an interface similar to <em>emqtt</em>, but allows the clients running
in the same VM to comunicate directly without waiting for the MQTT broker
messages to get back.

Could be used in multiple mode:

<ul>
  <li><b><em>internal</em></b>: All the messages are only local to the VM. This
  allow multiple erlang services in a same VM to use MQTT topics between them
  without any external MQTT broker.</li>

  <li><b><em>external</em></b>: All the messages are sent exclusively to an
  external MQTT broker. There is no much difference between this mode and using
  <em>emqtt</em> directly.</li>

  <li><b><em>hybride</em></b>: In this mode, the messages are sent both
  internally and to the external broker. The messages are taged with an instance
  identifier so they are filtered out when comming back to the VM. This allows
  all the services in the VM to comunicate directly while any external services
  using the same broker can still receive the messages too.</li>
</ul>

Only supports MQTT version 5 brokers.

Currently not supporting QoS 2 and QoS 1 is pretty much simulated when
messages are delivered internally.

Currently not supporting retained messages internally.

Implement automatic reconnection to the broker, with exponential backoff.


== Differences with EMQTT ==

The main difference between <em>emqtt</em> and <em>emqb</em> are:

<ul>
  <li><em>emqb</em> payloads are erlang terms, the encoding and decoding is done
  on-demand by a callback module given as an option when starting the client.
  This way not encoding or decoding is required when the message is not sent to
  the MQTT broker.</li>

  <li><em>emqb</em> does not support QoS 2 at this moment.</li>

  <li><em>emqb</em> <em>start_link</em> functions do not return a sinple PID,
  but an opaque data structure. It means it cannot be used in a supervisor, but
  that would be weird to use it like this anyway.</li>

  <li><em>emqb</em> do not have <em>connect</em> and <em>disconnect</em>
  functions, as it handles automatic reconnection with exponential backoff.</li>

  <li>The packet identifier in the received messages can either be an integer if
  the message came from an external MQTT broker, or an erlang reference if it
  was delivered internally.</li>
</ul>


== Bypass in Hybrid Mode ==

If an internal service is publishing a message, and is sure only a single
consumer should be subscribed to the topic, it can specify the publishing option
<c>{bypass, true}</c>. With this option, if there is an internal subscriber to
the topic, the message is <b>only</b> sent internally, it is <b>not</b> sent to
the external MQTT broker. If there is no local subscriber, the message will
still be sent to the broker. This could reduce the messages going out to the
broker, but this should be used carefully.


== Build ==

```
    $ rebar3 compile
'''

== Tests ==

To run the tests that needs a real MQTT broker, the following environment
variables may be set:

<ul>
    <li><b><em>MQTT_BROKER_HOST</em></b>: If not set "localhost" is
    assumed.</li>

    <li><b><em>MQTT_BROKER_PORT</em></b>: If not set, 1883 is assumed.</li>

    <li><b><em>MQTT_BROKER_USERNAME</em></b>: If not set, no authentication is
    done.</li>

    <li><b><em>MQTT_BROKER_PASSWORD</em></b>: If not set, no authentication is
    done.</li>
</ul>

Then you can run the tests with:

```
    $ rebar3 ct
'''

And see the report in <em>_build/test/logs/last/index.html</em>.
